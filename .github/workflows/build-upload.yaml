name: CI/CD Release Pipeline

on:
  push:
    branches:
      - feature/*
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

env:
  ENVIRONMENT:  ${{ github.event.inputs.environment }}
  ARTIFACT: grpc

jobs:
  ci:
    name: ci
    runs-on: ${{ vars.RUNNER }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Lint code
        run: echo "lint"

      - name: Test code
        run: echo "test code"

      - name: compress grpc
        run: |
          mkdir -p dist
          mv poetry.lock src
          mv pyproject.toml src
          tar -czvf ${{ env.ARTIFACT }}.tar.gz -C src .
          mv ${{ env.ARTIFACT }}.tar.gz dist/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: dist/*
  cd:
    name: cd
    if: ${{ github.ref_name == 'dev' || github.ref_name == 'main'}}
    needs: ci
    runs-on: ${{ vars.RUNNER }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get commits since last tag
        id: get_commits
        run: |
          # Determine the last tag, if none found, assume initial version
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # No previous tags, consider all history
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: determine_version
        run: |
          MAJOR_PATTERN='BREAKING'
          MINOR_PATTERN='feat'
          PATCH_PATTERN='fix'
          
          COMMITS="${{ steps.get_commits.outputs.commits }}"
          
          BUMP_TYPE="patch" # default
          if echo "$COMMITS" | grep -Eq "$MAJOR_PATTERN"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -Eq "$MINOR_PATTERN"; then
            BUMP_TYPE="minor"
          fi

          echo "Bump type: $BUMP_TYPE"
          
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION_NUM=${VERSION#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
          
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Push tag
        if: ${{ github.ref_name == 'main' }}
        run: |
          NEW_VERSION="${{ steps.determine_version.outputs.new_version }}"
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
  
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: dist
      
      - name: Create GitHub Release
        if: ${{ github.ref_name == 'dev' || github.ref_name == 'main' }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.determine_version.outputs.new_version }}
          release_name: v${{ steps.determine_version.outputs.new_version }}
          body: |
            This is the release notes for ${{ github.ref_name }}
          draft: false
          prerelease: ${{ github.ref_name == 'dev' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload asset to the release
        if: ${{ github.ref_name == 'dev' || github.ref_name == 'main' }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ env.ARTIFACT }}.tar.gz
          asset_name: ${{ env.ARTIFACT }}.tar.gz
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}